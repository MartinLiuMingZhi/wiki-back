name: Publish Packages

on:
  workflow_dispatch:
    inputs:
      package_type:
        description: 'Package type to publish'
        required: true
        type: choice
        options:
        - jar
        - docker
        - both
      version:
        description: 'Version to publish (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
        - staging
        - production

permissions:
  contents: write
  packages: write

env:
  JAVA_VERSION: '17'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 构建JAR包
  build-jar:
    name: Build JAR Package
    runs-on: ubuntu-latest
    if: github.event.inputs.package_type == 'jar' || github.event.inputs.package_type == 'both'
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-v1-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-v1-
          ${{ runner.os }}-m2-
        
    - name: Fix Maven Wrapper
      uses: ./.github/actions/maven-wrapper-fix
      
    - name: Build JAR package
      run: |
        echo "🚀 Building JAR package for version ${{ github.event.inputs.version }}..."
        ./mvnw clean package -DskipTests -T 1C
        
    - name: Generate test reports
      run: |
        echo "📊 Generating test reports..."
        ./mvnw jacoco:report -T 1C
        
    - name: Upload JAR artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifacts-${{ github.event.inputs.version }}
        path: target/*.jar
        retention-days: 90
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ github.event.inputs.version }}
        path: target/site/jacoco/
        retention-days: 90

  # 构建Docker镜像
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: github.event.inputs.package_type == 'docker' || github.event.inputs.package_type == 'both'
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ github.event.inputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ github.event.inputs.version }}

  # 发布到GitHub Releases
  publish-release:
    name: Publish to GitHub Release
    runs-on: ubuntu-latest
    needs: [build-jar, build-docker]
    if: always() && (needs.build-jar.result == 'success' || needs.build-docker.result == 'success')
    
    steps:
    - name: Download JAR artifacts
      uses: actions/download-artifact@v4
      if: needs.build-jar.result == 'success'
      with:
        name: jar-artifacts-${{ github.event.inputs.version }}
        path: ./artifacts
        
    - name: Download test reports
      uses: actions/download-artifact@v4
      if: needs.build-jar.result == 'success'
      with:
        name: test-reports-${{ github.event.inputs.version }}
        path: ./reports
        
    - name: Create release assets
      run: |
        echo "📦 Preparing release assets for ${{ github.event.inputs.version }}..."
        mkdir -p ./release-assets
        
        # 复制JAR文件
        if [ -d "./artifacts" ]; then
          cp ./artifacts/*.jar ./release-assets/
          echo "✅ JAR files copied"
        fi
        
        # 创建源码包
        tar -czf ./release-assets/wiki-source.tar.gz --exclude='.git' --exclude='target' --exclude='node_modules' .
        echo "✅ Source package created"
        
        # 创建测试报告包
        if [ -d "./reports" ]; then
          tar -czf ./release-assets/test-reports.tar.gz -C ./reports .
          echo "✅ Test reports packaged"
        fi
        
        echo "📋 Release assets prepared:"
        ls -la ./release-assets/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: Release ${{ github.event.inputs.version }}
        body: |
          ## 📦 Release ${{ github.event.inputs.version }}
          
          ### 📊 Package Information
          - **Version**: `${{ github.event.inputs.version }}`
          - **Environment**: `${{ github.event.inputs.environment }}`
          - **Package Type**: `${{ github.event.inputs.package_type }}`
          - **Build Date**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          ### 📋 Available Assets
          - **JAR Package**: `wiki-*.jar` - Spring Boot executable JAR
          - **Source Code**: `wiki-source.tar.gz` - Complete source code
          - **Test Reports**: `test-reports.tar.gz` - Code coverage and test results
          - **Docker Image**: `ghcr.io/${{ github.repository }}:${{ github.event.inputs.version }}`
          
          ### 🚀 Quick Start
          ```bash
          # Run JAR directly
          java -jar wiki-*.jar
          
          # Run with Docker
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:${{ github.event.inputs.version }}
          ```
          
          ### 🔗 Links
          - **Docker Image**: `ghcr.io/${{ github.repository }}:${{ github.event.inputs.version }}`
          - **GitHub Actions**: https://github.com/${{ github.repository }}/actions
          
          ---
          *This release was created by GitHub Actions workflow.*
        files: |
          ./release-assets/*.jar
          ./release-assets/wiki-source.tar.gz
          ./release-assets/test-reports.tar.gz
        draft: false
        prerelease: ${{ github.event.inputs.environment == 'staging' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 部署到目标环境
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [publish-release]
    if: needs.publish-release.result == 'success'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Deploy to ${{ github.event.inputs.environment }}
      run: |
        echo "🚀 Deploying to ${{ github.event.inputs.environment }} environment..."
        echo "Version: ${{ github.event.inputs.version }}"
        echo "Package Type: ${{ github.event.inputs.package_type }}"
        
        if [ "${{ github.event.inputs.package_type }}" = "jar" ] || [ "${{ github.event.inputs.package_type }}" = "both" ]; then
          echo "📦 JAR deployment strategy:"
          echo "  - Download JAR from GitHub Releases"
          echo "  - Deploy to application server"
          echo "  - Configure environment variables"
        fi
        
        if [ "${{ github.event.inputs.package_type }}" = "docker" ] || [ "${{ github.event.inputs.package_type }}" = "both" ]; then
          echo "🐳 Docker deployment strategy:"
          echo "  - Pull image: ghcr.io/${{ github.repository }}:${{ github.event.inputs.version }}"
          echo "  - Deploy with Docker Compose or Kubernetes"
          echo "  - Configure container environment"
        fi
        
        # 这里可以添加具体的部署脚本
        # 例如：kubectl apply -f k8s/${{ github.event.inputs.environment }}/
        # 或者：docker-compose -f docker-compose.${{ github.event.inputs.environment }}.yml up -d
        
    - name: Health check
      run: |
        echo "🔍 Performing health check..."
        # 添加健康检查逻辑
        # curl -f http://${{ github.event.inputs.environment }}.example.com/actuator/health || exit 1
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Deployment to ${{ github.event.inputs.environment }} successful!"
        echo "Version: ${{ github.event.inputs.version }}"
        echo "Package Type: ${{ github.event.inputs.package_type }}"
        echo "Environment: ${{ github.event.inputs.environment }}"
