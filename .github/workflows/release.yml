name: Release Workflow

on:
  push:
    branches:
      - 'develop'  # 主要从develop分支发布版本
      - 'v*/develop'  # 支持 v1.0.0/develop 这样的分支版本
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version in semantic versioning format (e.g., v1.0.0, v2.1.3)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string
        default: ''
      source_branch:
        description: 'Source branch for release'
        required: false
        type: string
        default: 'develop'

permissions:
  contents: write  # 创建Release需要
  packages: write  # 推送Docker镜像需要
  pull-requests: write  # 合并分支需要
  actions: write  # 管理工作流需要

env:
  JAVA_VERSION: '17'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 创建发布
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      source_branch: ${{ steps.version.outputs.source_branch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # 手动触发：使用输入的版本
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "source_branch=${{ github.event.inputs.source_branch }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" =~ ^refs/heads/develop$ ]]; then
          # develop分支触发：自动生成版本号（基于最新标签递增PATCH版本）
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "🏷️  Latest tag: $LATEST_TAG"
          
          # 提取版本号并递增PATCH版本
          VERSION_NUM=$(echo $LATEST_TAG | sed 's/v//' | awk -F. '{print $1"."$2"."$3+1}')
          VERSION="v$VERSION_NUM"
          echo "📦 New version: $VERSION"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$VERSION" >> $GITHUB_OUTPUT
          echo "source_branch=develop" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" =~ ^refs/heads/v.*/develop$ ]]; then
          # 大版本分支触发：基于大版本自动递增PATCH版本
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          MAJOR_VERSION=${BRANCH_NAME%/develop}
          
          echo "🏷️  Major version branch: $MAJOR_VERSION"
          
          # 获取该大版本下的最新标签
          LATEST_TAG=$(git tag --list "${MAJOR_VERSION}.*" --sort=-version:refname | head -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            # 如果没有该大版本的标签，从 v1.0.0 开始
            VERSION="${MAJOR_VERSION}.0"
            echo "📦 No previous tags found for major version, starting with ${VERSION}"
          else
            # 提取版本号并递增PATCH版本
            VERSION_NUM=$(echo $LATEST_TAG | sed 's/v//' | awk -F. '{print $1"."$2"."$3+1}')
            VERSION="v$VERSION_NUM"
            echo "📦 Latest tag: $LATEST_TAG, new version: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$VERSION" >> $GITHUB_OUTPUT
          echo "source_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
        else
          echo "❌ Unsupported trigger type"
          exit 1
        fi
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "🔍 Validating version format: $VERSION"
        
        # 检查版本号格式是否为 vX.Y.Z
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z (e.g., v1.0.0, v2.1.3)"
          exit 1
        fi
        
        # 提取版本号部分
        VERSION_NUM=$(echo $VERSION | sed 's/v//')
        MAJOR=$(echo $VERSION_NUM | cut -d. -f1)
        MINOR=$(echo $VERSION_NUM | cut -d. -f2)
        PATCH=$(echo $VERSION_NUM | cut -d. -f3)
        
        echo "✅ Version components: Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"
        
        # 验证版本号范围
        if [ $MAJOR -lt 0 ] || [ $MAJOR -gt 999 ]; then
          echo "❌ Major version out of range: $MAJOR"
          exit 1
        fi
        
        if [ $MINOR -lt 0 ] || [ $MINOR -gt 999 ]; then
          echo "❌ Minor version out of range: $MINOR"
          exit 1
        fi
        
        if [ $PATCH -lt 0 ] || [ $PATCH -gt 999 ]; then
          echo "❌ Patch version out of range: $PATCH"
          exit 1
        fi
        
        echo "✅ Version format validation passed"
        
    - name: Display version info
      run: |
        echo "📦 Release version: ${{ steps.version.outputs.version }}"
        echo "🏷️  Tag name: ${{ steps.version.outputs.tag_name }}"
        echo "🌿 Source branch: ${{ steps.version.outputs.source_branch }}"
        
    - name: Generate changelog
      id: changelog
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.release_notes }}" ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.inputs.release_notes }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          # 获取构建信息
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          SOURCE_BRANCH="${{ steps.version.outputs.source_branch }}"
          VERSION="${{ steps.version.outputs.tag_name }}"
          
          # 获取提交统计
          COMMIT_COUNT=$(git rev-list --count HEAD)
          CONTRIBUTORS=$(git log --format='%an' | sort -u | wc -l)
          
          # 获取最近的提交
          RECENT_COMMITS=$(git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "HEAD~10")..HEAD 2>/dev/null || git log --oneline --pretty=format:"- %s" -10)
          
          # 生成发布信息
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## 🚀 Release $VERSION" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📊 Release Information" >> $GITHUB_OUTPUT
          echo "- **Version**: \`$VERSION\`" >> $GITHUB_OUTPUT
          echo "- **Source Branch**: \`$SOURCE_BRANCH\`" >> $GITHUB_OUTPUT
          echo "- **Build Date**: \`$BUILD_DATE\`" >> $GITHUB_OUTPUT
          echo "- **Total Commits**: \`$COMMIT_COUNT\`" >> $GITHUB_OUTPUT
          echo "- **Contributors**: \`$CONTRIBUTORS\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📝 What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$RECENT_COMMITS" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🔗 Links" >> $GITHUB_OUTPUT
          echo "- **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "HEAD~10")...$VERSION" >> $GITHUB_OUTPUT
          echo "- **Docker Image**: \`ghcr.io/${{ github.repository }}:$VERSION\`" >> $GITHUB_OUTPUT
          echo "- **GitHub Actions**: https://github.com/${{ github.repository }}/actions" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🏷️ Version History" >> $GITHUB_OUTPUT
          echo "This release includes all changes from the previous version with the following improvements:" >> $GITHUB_OUTPUT
          echo "- ✅ Automated CI/CD pipeline execution" >> $GITHUB_OUTPUT
          echo "- ✅ Multi-architecture Docker image build" >> $GITHUB_OUTPUT
          echo "- ✅ Comprehensive testing and quality checks" >> $GITHUB_OUTPUT
          echo "- ✅ Security scanning and dependency updates" >> $GITHUB_OUTPUT
          echo "- ✅ Performance optimization and monitoring" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "---" >> $GITHUB_OUTPUT
          echo "*This release was automatically generated by GitHub Actions.*" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Release ${{ steps.version.outputs.tag_name }}
        body: |
          ${{ steps.changelog.outputs.changelog }}
          
          **Source Branch:** ${{ steps.version.outputs.source_branch }}
          **Build Date:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建发布版本
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-v1-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-v1-
          ${{ runner.os }}-m2-
        
    - name: Fix Maven Wrapper
      uses: ./.github/actions/maven-wrapper-fix
      
    - name: Build application
      run: |
        echo "🚀 Building application..."
        ./mvnw clean package -DskipTests -T 1C
      continue-on-error: false
        
    - name: Verify build artifacts
      run: |
        echo "🔍 Verifying build artifacts..."
        if [ ! -f target/*.jar ]; then
          echo "❌ No JAR files found in target directory"
          exit 1
        fi
        echo "✅ Build artifacts verified"
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: release-artifacts
        path: target/*.jar
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('target/site/jacoco/**') != ''
      with:
        name: test-reports
        path: target/site/jacoco/

  # 发布JAR包到GitHub Releases
  publish-jar:
    name: Publish JAR to Release
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    
    steps:
    - name: Download JAR artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./artifacts
        
    - name: Download test reports
      uses: actions/download-artifact@v4
      if: always()
      with:
        name: test-reports
        path: ./reports
      continue-on-error: true
        
    - name: Create release assets
      run: |
        echo "📦 Preparing release assets..."
        mkdir -p ./release-assets
        
        # 复制JAR文件
        cp ./artifacts/*.jar ./release-assets/
        echo "✅ JAR files copied"
        
        # 创建源码包（排除release-assets目录避免循环引用）
        echo "📦 Creating source package..."
        tar -czf ./release-assets/wiki-source.tar.gz \
          --exclude='.git' \
          --exclude='target' \
          --exclude='node_modules' \
          --exclude='./release-assets' \
          --exclude='./artifacts' \
          --exclude='./reports' \
          .
        echo "✅ Source package created"
        
        # 创建测试报告包
        if [ -d "./reports" ] && [ "$(ls -A ./reports 2>/dev/null)" ]; then
          echo "📦 Creating test reports package..."
          tar -czf ./release-assets/test-reports.tar.gz -C ./reports .
          echo "✅ Test reports packaged"
        else
          echo "ℹ️  No test reports available, skipping test-reports.tar.gz"
        fi
        
        echo "📋 Release assets prepared:"
        ls -la ./release-assets/
        
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: |
          ./release-assets/*.jar
          ./release-assets/wiki-source.tar.gz
          ./release-assets/test-reports.tar.gz
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建Docker镜像
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.create-release.outputs.tag_name }}
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ needs.create-release.outputs.tag_name }}
      continue-on-error: false

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, publish-jar, build-docker]
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Version: ${{ needs.create-release.outputs.tag_name }}"
        echo "Source Branch: ${{ needs.create-release.outputs.source_branch }}"
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.tag_name }}"
        
        # 根据源分支选择不同的部署策略
        if [ "${{ needs.create-release.outputs.source_branch }}" = "develop" ]; then
          echo "📦 Deploying from develop branch (stable release)"
          # 从develop分支的稳定版本部署策略
        elif [[ "${{ needs.create-release.outputs.source_branch }}" =~ ^v.*/develop$ ]]; then
          echo "🧪 Deploying from version branch (pre-release)"
          # 从版本分支的预发布版本部署策略
        fi
        
        # 这里可以添加具体的部署脚本
        # 例如：kubectl apply -f k8s/production/
        # 或者：docker-compose -f docker-compose.production.yml up -d
        
    - name: Health check
      run: |
        echo "🔍 Performing health check..."
        # 添加健康检查逻辑
        # curl -f http://production.example.com/actuator/health || exit 1
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        echo "Version: ${{ needs.create-release.outputs.tag_name }}"
        echo "Environment: production"
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.tag_name }}"

  # 合并到main分支
  merge-to-main:
    name: Merge to Main Branch
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always() && github.ref == 'refs/heads/develop'
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global pull.rebase false
        
    - name: Check merge status
      id: check-status
      run: |
        echo "🔍 Checking merge status..."
        echo "📊 Debug information:"
        echo "  - Current branch: $(git branch --show-current)"
        echo "  - GitHub ref: ${{ github.ref }}"
        echo "  - GitHub event: ${{ github.event_name }}"
        echo "  - Create-release result: ${{ needs.create-release.result }}"
        
        # 获取最新信息
        echo "📥 Fetching latest information..."
        git fetch origin
        git checkout main
        git pull origin main
        
        echo "📊 Branch information:"
        echo "  - Main branch commit: $(git rev-parse main)"
        echo "  - Develop branch commit: $(git rev-parse develop)"
        
        # 检查develop是否已经合并到main
        echo "🔍 Checking if develop is already merged into main..."
        if git merge-base --is-ancestor develop main; then
          echo "is-merged=true" >> $GITHUB_OUTPUT
          echo "✅ develop is already merged into main"
          echo "📊 Merge base: $(git merge-base develop main)"
        else
          echo "is-merged=false" >> $GITHUB_OUTPUT
          echo "🔄 develop needs to be merged into main"
          echo "📊 Merge base: $(git merge-base develop main)"
        fi
        
        # 检查是否有冲突
        echo "🔍 Checking for merge conflicts..."
        git checkout develop
        git pull origin develop
        
        echo "📊 Checking conflicts between develop and main..."
        MERGE_TREE_OUTPUT=$(git merge-tree $(git merge-base develop main) develop main)
        if echo "$MERGE_TREE_OUTPUT" | grep -q "<<<<<<<"; then
          echo "has-conflicts=true" >> $GITHUB_OUTPUT
          echo "⚠️ Potential merge conflicts detected"
          echo "📊 Conflict details:"
          echo "$MERGE_TREE_OUTPUT" | head -20
        else
          echo "has-conflicts=false" >> $GITHUB_OUTPUT
          echo "✅ No merge conflicts detected"
        fi
        
        echo "📊 Final status:"
        echo "  - Is merged: ${{ steps.check-status.outputs.is-merged }}"
        echo "  - Has conflicts: ${{ steps.check-status.outputs.has-conflicts }}"
        
    - name: Merge develop to main
      if: steps.check-status.outputs.is-merged == 'false' && steps.check-status.outputs.has-conflicts == 'false'
      run: |
        echo "🔄 Merging develop branch to main..."
        echo "📊 Merge conditions:"
        echo "  - Is merged: ${{ steps.check-status.outputs.is-merged }}"
        echo "  - Has conflicts: ${{ steps.check-status.outputs.has-conflicts }}"
        
        # 切换到main分支
        git checkout main
        git pull origin main
        
        # 显示合并前的状态
        echo "📊 Pre-merge status:"
        echo "  - Main commit: $(git rev-parse main)"
        echo "  - Develop commit: $(git rev-parse develop)"
        
        # 创建合并提交
        echo "🔄 Creating merge commit..."
        git merge develop --no-ff -m "Merge develop to main for release ${{ needs.create-release.outputs.tag_name }}"
        
        # 显示合并后的状态
        echo "📊 Post-merge status:"
        echo "  - Main commit: $(git rev-parse main)"
        echo "  - Merge commit: $(git log -1 --oneline)"
        
        # 推送合并结果
        echo "📤 Pushing merge to origin..."
        git push origin main
        
        echo "✅ Successfully merged develop to main"
        
    - name: Handle merge conflicts
      if: steps.check-status.outputs.has-conflicts == 'true'
      run: |
        echo "❌ Merge conflicts detected. Manual intervention required."
        echo "Please resolve conflicts and merge manually."
        exit 1
        
    - name: Skip merge (already merged)
      if: steps.check-status.outputs.is-merged == 'true'
      run: |
        echo "ℹ️ develop is already merged into main, skipping merge operation"
        echo "📊 Verification:"
        echo "  - Main commit: $(git rev-parse main)"
        echo "  - Develop commit: $(git rev-parse develop)"
        echo "  - Merge base: $(git merge-base develop main)"
        
    - name: Force merge (if needed)
      if: steps.check-status.outputs.is-merged == 'false' && steps.check-status.outputs.has-conflicts == 'false'
      run: |
        echo "🔄 Attempting force merge..."
        echo "📊 This step will run if the previous merge step didn't execute"
        
        # 再次检查状态
        git fetch origin
        git checkout main
        git pull origin main
        
        # 检查是否真的需要合并
        if ! git merge-base --is-ancestor develop main; then
          echo "🔄 Force merging develop to main..."
          git merge develop --no-ff -m "Force merge develop to main for release ${{ needs.create-release.outputs.tag_name }}"
          git push origin main
          echo "✅ Force merge completed"
        else
          echo "ℹ️ develop is already merged, no force merge needed"
        fi
        
    - name: Create merge notification
      if: always()
      run: |
        echo "📢 Merge operation status:"
        echo "  - Source: develop"
        echo "  - Target: main"
        echo "  - Release: ${{ needs.create-release.outputs.tag_name }}"
        echo "  - Already merged: ${{ steps.check-status.outputs.is-merged }}"
        echo "  - Has conflicts: ${{ steps.check-status.outputs.has-conflicts }}"
        echo "  - Current commit: $(git rev-parse HEAD)"
        
        if [ "${{ steps.check-status.outputs.is-merged }}" = "true" ]; then
          echo "✅ Merge operation completed successfully (already merged)"
        elif [ "${{ steps.check-status.outputs.has-conflicts }}" = "true" ]; then
          echo "❌ Merge operation failed due to conflicts"
        else
          echo "✅ Merge operation completed successfully"
        fi

  # 回滚检查
  rollback-check:
    name: Rollback Check
    runs-on: ubuntu-latest
    needs: [deploy-production, merge-to-main]
    if: always()
    
    steps:
    - name: Check deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "✅ Deployment successful, no rollback needed"
        else
          echo "❌ Deployment failed, initiating rollback..."
          # 这里可以添加回滚逻辑
          # 例如：kubectl rollout undo deployment/wiki-app
          # 或者：docker-compose -f docker-compose.production.yml down && docker-compose -f docker-compose.production.yml up -d
        fi