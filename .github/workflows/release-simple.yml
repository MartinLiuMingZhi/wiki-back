name: 🚀 Release Workflow

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string
        default: ''

permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  JAVA_VERSION: '17'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 创建发布
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # 自动生成版本号
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION_NUM=$(echo $LATEST_TAG | sed 's/v//' | awk -F. '{print $1"."$2"."$3+1}')
          VERSION="v$VERSION_NUM"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Release ${{ steps.version.outputs.tag_name }}
        body: |
          ## 🚀 Release ${{ steps.version.outputs.tag_name }}
          
          ### 📊 Release Information
          - **Version**: `${{ steps.version.outputs.tag_name }}`
          - **Build Date**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          - **Source**: develop branch
          
          ### 🔗 Links
          - **Docker Image**: `ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag_name }}`
          - **GitHub Actions**: https://github.com/${{ github.repository }}/actions
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建发布版本
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-v1-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-v1-
          ${{ runner.os }}-m2-
        
    - name: Fix Maven Wrapper
      uses: ./.github/actions/maven-wrapper-fix
      
    - name: Build application
      run: |
        echo "🚀 Building application..."
        ./mvnw clean package -DskipTests -T 1C
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: target/*.jar

  # 构建Docker镜像
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.create-release.outputs.tag_name }}
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ needs.create-release.outputs.tag_name }}

  # 合并到main分支
  merge-to-main:
    name: Merge to Main Branch
    runs-on: ubuntu-latest
    needs: [create-release, build-docker]
    if: github.ref == 'refs/heads/develop'
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global pull.rebase false
        
    - name: Merge develop to main
      run: |
        echo "🔄 Merging develop to main..."
        git fetch origin
        git checkout main
        git pull origin main
        git merge develop --no-ff -m "Merge develop to main for release ${{ needs.create-release.outputs.tag_name }}"
        git push origin main
        echo "✅ Successfully merged develop to main"
